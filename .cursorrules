# Project-Specific Instructions for Cursor AI

## General Guidelines
- Write clean, maintainable, and well-documented React code
- Adhere to the Airbnb JavaScript Style Guide
- Prioritize component reusability and modularity
- Use JSX for React components with `.jsx` extension

## Code Structure
- Organize code using feature-based architecture:
  - `src/features/{feature-name}/components/`
  - `src/features/{feature-name}/hooks/`
  - `src/features/{feature-name}/utils/`
- Use functional components exclusively
- Co-locate related files (components, tests, styles) in feature directories
- Place shared UI components in `src/components/ui`

## Component Architecture
- Follow atomic design principles:
  - Atoms: Basic UI components (`Button`, `Input`, etc.)
  - Molecules: Composite components
  - Organisms: Complex, self-contained features
- Implement error boundaries at feature level
- Use loading states and skeletons for better UX

## State Management
- Use React hooks for local state (`useState`, `useReducer`)
- Implement custom hooks for complex logic and API interactions
- Follow the container/presenter pattern where applicable

## Styling
- Use Tailwind CSS with consistent class naming
- Leverage `class-variance-authority` for component variants
- Follow utility-first CSS approach
- Use `cn()` utility for conditional class merging

## Component Libraries
- Use Radix UI primitives for accessible components
- Implement consistent component APIs using shadcn/ui patterns
- Maintain consistent prop interfaces across components

## Error Handling
- Implement error boundaries for feature-level error catching
- Use toast notifications for user feedback
- Provide fallback UI for error states
- Include retry mechanisms where appropriate

## Performance
- Implement React.memo for expensive renders
- Use dynamic imports for code splitting
- Implement loading states and skeleton screens
- Optimize bundle size with proper imports

## Accessibility
- Follow WAI-ARIA guidelines
- Implement keyboard navigation
- Provide proper ARIA labels and roles
- Ensure proper color contrast ratios

## Documentation
- Include JSDoc comments for components and hooks
- Document component props using PropTypes or TypeScript
- Maintain README files for features and shared components
- Include usage examples for reusable components

## Version Control
- Follow conventional commits specification
- Include meaningful PR descriptions
- Keep components focused and single-responsibility
- Review code for proper error handling and accessibility

## Icons and Assets
- Use Lucide React for consistent iconography
- Optimize SVG icons and images
- Maintain consistent icon sizing and coloring

## Forms and Validation
- Implement consistent form handling patterns
- Use proper input validation and error states
- Provide clear user feedback for form actions

## API Integration
- Use axios for HTTP requests
- Implement proper error handling for API calls
- Include loading and error states
- Cache API responses where appropriate

## AI Interaction
- Provide detailed prompts to the AI for accurate code generation.
- Review and test AI-generated code thoroughly before integration.
- Update this `.cursorrules` file as project requirements evolve.

